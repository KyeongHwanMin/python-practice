# id, list, set, dict, tuple,  print, zip, all, any, ascii, len, locals, range, max, map, min, next, repr, round, sum, type, hash, dir

# id(object) : 매개변수가 한 개 반드시 있어야함.
# 객체의 'identity'를 반환, 고유하고  일정하게 유지되는 정수, 라이프타임이 겹치지 않으면 두 객체의 id 값이 같을 수 있음.
# 세부정보 : 메모리에 있는 객체의 주소.
# 객체를 입력받아 객체의 고유 주소 값(레퍼런스)를 돌려주는 함수.

# a = 3
# id(3)
# print(id(3))
# print(id(a))
# b = a
# print(id(b))
# 3, a, b가 같은 객체를 가리킴

#####################################################################################################################################################
# class list([iterable]) : 함수라기 보다는, 목록 및 시퀀스(순서) 유형(변경 가능한 mutable)
# iterable : 반복할 수 있는
# 반복 가능한 자료형을 입력받아 리스트로 만들어 돌려주는 함수.

# print(list("minkyeonghwan"))
# print(list((1,2,3,4,5)))
# a = ["10","100","1000"]
# b = list(a)
# c = a
# print(b)
# print(c)
# [] 대괄호를 사용하여 빈 목록 표시
# [a],[a,b,c] : 대괄호 사용, 쉼표로 구분
# [x for x in iterable] : list comprehension 사용
# list() or list(iterable) : 생성자 사용

#####################################################################################################################################################
# class set([iterable]) : 집합과 비슷, 순서가 없다, 중복 불가
# test = set([1,2,3,4,5])
# print(test)
# print(type(test))
# test2 = {1,2,3,4,5}
# print(test2)
# print(type(test))
# test2.add(8)
# print(test2)
# test3 = {1,1,2,2,3,3,4,4,5,5}
# print(test3)
# test4 = {c for c in 'abracadabra' if c not in 'abc'}
# print(test4)
# {'jack','sjoerd'} : 중괄호 안에 쉼표로 구분된 리스트 사용
# {c for c in 'abracadabra' if c not in 'abc'} : set comprehension 사용
# set(), set('foobar'), set(['a','b','c']) : 생성자 사용

#####################################################################################################################################################
# class dict(**kwarg), class dict(mapping, **kwarg), class dict(iterable, **kwarg)
# 사전 클래스
# dictest = {'name':'민경환','phone':'010-5833-3333'}
# print('name' in dictest)
# print('address' in dictest)
# print(dictest.keys())
# print(dictest.values())
# print(dictest.items())
# dictest2 = {x: x ** 2 for x in range(10)}
# print(dictest2)

# {'jack': 4098, 'sjoerd': 4127} : 쉼표로 키, 값 구분
# {x: x **2 for x in range(10)} : dict comprehension
# dict(), dict(['foo', 100), ('bar', 200)]), dict(foo=100, bar=200) : 생성자 사용

#####################################################################################################################################################
# class tuple([iterable]) : 함수라기 보다는 immutable 시퀀스 타입
# tuple(iterable) 반복 가능한 자료형을 입력받아 튜플 형태로 바꾸어 돌려주는 함수. 리스트와 같고 특이 점은 값 변경 불가
# t1 = (1,) # 값 1개만 입력받는 방법
# t2 = 1,2,3
# t3 = ('a','b',('ab','cd'))
# () : 괄호를 사용
# a, or (a,) : 싱글톤 튜플에 콤마 사용
# a, b, c or (a, b, c) : 쉼표로 항목 구분
# tuple() or tuple(iterable) : 기본제공 튜플 사용

#####################################################################################################################################################

# print(*objects,setp'',end='\n',file=sys.stdout,flush=False)
# 텍스트 스트림 파일로 객체를 출력, sep로 구분. 매개변수 가변적, 숫자가 들어오면 문자열로 디코딩

# a = 1
# b = 2
# print(a,b)

# print(a, end=" ") # end 속성으로 줄 바꿈을 공백으로 대체
# print(b, end=" ")

# a = 10
# print(f"정답은 {a} 입니다.") # f-string(python 3.6)

#####################################################################################################################################################

# zip(*iterables, strict=False) : 동일한 개수로 이루어진 자료형을 묶어 주는 역할
# print(list(zip([1,2,3],[4,5,6])))
# print(list(zip([1,2,3],[4,5,6],[7,8,9])))
# print(list(zip("abc","def")))
# for item in zip([1,2,3],['sugar','spice','everythingnice']):
#     print(item)

# print(list(zip(range(3),['fee','fi','fo','fum']))) # 가장 잛은 반복이 소진되면 중지됨. 긴 반복은 무시하고 버려짐
# print(list(zip(('a','b','c'),(1,2,3,), strict=True))) # 반복가능한 길이가 동일할때 종종 사용  strict=True를 사용
# print(list(zip(range(3),['free','fi','fo','fum'], strict=True))) # strict=True를 사용했을 때 반복 길이가 같지 않으면 ValueError 발생.
# Strict가 없다면 다른 길이의 반복을 했을 때 버그를 못찾을 것이며, 프로그램의 다른 부분에서 찾기 어려울 것이다.

#####################################################################################################################################################
# all(iterable) : 반복 가능한 자료형을 인자로 받으면 이 요소가 모두 참이면 True, 하나라도 거짓이면 False 반환
# print(all([1,2,3]))
# print(all([1,2,3,0])) # 0 거짓, False 반환
# print(all([]))
# def all(iterable):
#     for element in iterable:
#         if not element:
#             return False
#     return True
#####################################################################################################################################################
# any(iterable) : 반복 가능한 자료형을 인자로 받으며 하나라도 참이면 True, 모두 거짓일 경우만 False
# print(any([1,2,3,0]))
# print(any([0,'']))
# print(any([]))
# def any(iterable):
#     for element in iterable:
#         if element:
#             return True
#     return False
#####################################################################################################################################################
# ascii(object) : 비 ascii 문자열을 Unicode로 이스케이프.
# n=1
# print(ascii(n))
# s="문자열"
# print(ascii(s))
#####################################################################################################################################################
# len(s) : 입력값 s의 길이(요소 전체 개수)를 반환
# print(len('python'))
# print(len([1,2,3]))
# print(len((1,'a')))
#####################################################################################################################################################
# locals() : 현재 파일 내 local 변수를 딕셔너리 형태로 반환, 또한 변수 선언 가능
#####################################################################################################################################################
# range(stop), range(start,stop,[step]) : for문과 자주 사용, 입력 받은 숫자에 해당하는 범위 값을 반복 가능한 객체로 반환
# print(list(range(5))) # 0부터 시작
# print(list(range(5,10)))# 시작 숫자와 끝 숫자를 나타냄, 끝 숫자는 해당 범위에 미포함.
# print(list(range(1,10,2))) # 세 번째 인수는 숫자 사이의 거리
# print(list(range(0, -10, -1)))
#####################################################################################################################################################
# max(iterable, *, [key],dafault), max(arg1,arg2,*args,[key]) : 인수로 반복 가능한 자료형을 입력받아 최댓값을 돌려줌.
# print(max([1,2,3]))
# print(max("python"))
#####################################################################################################################################################
# map(function, iterable) : 함수와 반복 가능한 자료형을 입력 받는다. 입력 받은 자료형의 각 요소를 함수가 수행한 결과를 묶어서 돌려줌.
# iterable 의 모든 항목에 function 을 적용한 후 그 결과를 돌려주는 이터레이터를 돌려줍니다.
# def two_times(numberList):
#     result = []
#     for number in numberList:
#         result.append(number*2)
#     return result


# result = two_times([1, 2, 3, 4])
# print(result)


# # map 사용
# def two_times(x):
#     return x*2


# print(list(map(two_times, [1, 2, 3, 4])))
# # lambda를 사용 더 간단
# print(list(map(lambda a: a*2, [1, 2, 3, 4])))
#####################################################################################################################################################
# min(iterable) : 인수로 반복 가능한 자료형을 입력받아 그 최솟값을 돌려줌
# print(min([1, 2, 3]))
# print(min("python"))
#####################################################################################################################################################
# next(iterator,default) : 반복 가능 객체의 다음 요소 반환 __next__() 메서드를 호출하여 다음 항목을 검색,
# L_list = [1, 2, 3, 4, 5]
# for index in L_list:  # Automatic iteration
#     print(index)  # Obtains iter, calls __next__
# # for 안에 __next__ 인자가 있어서 Iterable Object인 list 안에서 자동적으로 반복을 수행.

# L_list = [1, 2, 3, 4, 5]
# I = iter(L_list)
# print(I.__next__())
# print(next(I))
# print(next(I))
#####################################################################################################################################################
# repr(object) : 어떤 객체의 '출력될 수 있는 표현'을 문자열의 형태로반환, 객체를 설명해 줄 수 있는, 화면에 출력될 수 있는 문자열 표현을 반환.
#  __repr__의 본 목적은 객체를 인간이 이해할 수 있는 평문으로 표현. __str__은 '문자열화'해 반환이 목적.
# import math

# repr(3)
# repr([1, 2, 3])
# repr(math)


# '3'
# '[1, 2, 3'
# "<module 'math' from ...>"
#####################################################################################################################################################
# round(number[,ndigits]) : 숫자를 입력받아 반올림.
# [, ndigits]는 ndigits가 있을 수도 있고 없을 수도 있다는 의미이다.
# print(round(4.6))
# print(round(4.2))
# print(round(5.678, 2))  # 실수를 소수점 2점까지만 반올림.
# round 함수의 두 번째 매개변수는 반올림하여 표시하고 싶은 소수점의 자릿수(ndigits)이다.
#####################################################################################################################################################
# sum(iterable) : 입력받은 리스트나 튜플의 모든 요소의 합을 돌려주는 함수.
# print(sum([1, 2, 3]))
# print(sum((4, 5, 6)))
#####################################################################################################################################################
# type(object), type(name,bases,dict, **kwds) : 입력값의 자료형이 무엇인지 알려줌.
# print(type('abc'))
# print(type([]))
# print(type({}))
# print(type(set()))
# print(type(()))
#####################################################################################################################################################
# hash(object) : # object : 해시 값을 돌려받을 객체 (정수, 문자열, float)
# 객체의 해시값(정수)을 돌려줌, 딕셔너리 키를 빨리 비교하는데 사용.
# 해시란 어떠한 값을 식별할 수 있는 정해진 길이의 정수이다. 모든 값은 고유의 해시를 가지고 있으므로, 다른 변수에 담겨있으도 값이 같으면 해시도 같다.
# print(hash("Look at me"))
# f = "Look at me"
# print(hash(f))
# print(hash(181))
# print(hash(181.23))
# print(hash('Python'))
#####################################################################################################################################################
# dir(object) : 객체가 자체적으로 가지고 있는 변수나 함수를 보여줌.
# print(dir([1, 2, 3]))
# print(dir({'1': 'a'}))


def spam(eggs):
    eggs.append(1)  # call by reference로 동작 / caller scope까지 적용
    # call by value로 동작, 새로운 객체를 가르킨다. / callee scope에는 적용되지만, caller scope까지는 적용되지 않는다.
    eggs = [2, 3]
    print(eggs)


ham = [0]
# spam(ham)  # [2, 3]
print(ham)  # [0, 1]
